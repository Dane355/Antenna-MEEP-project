from __future__ import division
import meep as mp
resolution = 5
sxy = 4
dpml = 1
cell = mp.Vector3(30,30)
pml_layers = [mp.PML(dpml)]
fcen = 1.0
df = 0.4
src_cmpt = mp.Ey
if src_cmpt == mp.Ex:
    symmetries = [mp.Mirror(mp.X,phase=-1), mp.Mirror(mp.Y,phase=+1)]
elif src_cmpt == mp.Ey:
    symmetries = [mp.Mirror(mp.X,phase=+1), mp.Mirror(mp.Y,phase=-1)]
elif src_cmpt == mp.Ez:
    symmetries = [mp.Mirror(mp.X,phase=+1), mp.Mirror(mp.Y,phase=+1)]
gdsIIfile = 'horn_layout2.gds'
bottom_layer = 1
side_layer = 2
top_layer = 3
cell_layer = 4
plug_layer = 5
epsilon_horn = mp.metal
bottom = mp.get_GDSII_prisms(epsilon_horn, gdsIIfile, bottom_layer)
top = mp.get_GDSII_prisms(epsilon_horn, gdsIIfile, top_layer)
sides = mp.get_GDSII_prisms(epsilon_horn, gdsIIfile, side_layer)
plug = mp.get_GDSII_prisms(epsilon_horn, gdsIIfile, plug_layer)
delta = mp.Vector3(0,0)
bottom[0].center += delta
sides[0].center += delta
sides[1].center += delta
top[0].center += delta
plug[0].center += delta
geometry = bottom + sides + top + plug
sources = [mp.Source(src=mp.GaussianSource(fcen,fwidth=df), center=mp.Vector3(), component=src_cmpt), mp.Source(mp.ContinuousSource(frequency=0.05,width=1.0), component= mp.Ey, center=mp.Vector3(1,0), size=mp.Vector3(0.0,0.2))]
sim = mp.Simulation(resolution=resolution, cell_size=cell, boundary_layers=pml_layers, geometry=geometry, sources=sources, symmetries=symmetries)
nearfield_box = sim.add_near2far(fcen, 0, 1, mp.Near2FarRegion(center=mp.Vector3(0,+0.5*sxy), size=mp.Vector3(sxy,0)), mp.Near2FarRegion(center=mp.Vector3(0,-0.5*sxy), size=mp.Vector3(sxy,0), weight=-1), mp.Near2FarRegion(center=mp.Vector3(+0.5*sxy,0), size=mp.Vector3(0,sxy)), mp.Near2FarRegion(center=mp.Vector3(-0.5*sxy,0), size=mp.Vector3(0,sxy), weight=-1))
sim.run(mp.to_appended("ey",mp.at_every(0.5,mp.output_efield_y)),until=50)

#creates gif with only 2 pulsating points with little signs of wave propogations, no horn in sight
